module Halogen.Driver
  -- ( Driver
  -- , runUI
  -- )
  where

import Prelude

import Control.Coroutine (Consumer, await)
import Control.Coroutine.Stalling (($$?))
import Control.Coroutine.Stalling as SCR
import Control.Monad.Aff (Aff, forkAff)
import Control.Monad.Aff.AVar (AVar, AVAR, putVar, takeVar, modifyVar, makeVar)
import Control.Monad.Eff.Class (liftEff)
import Control.Monad.Free (Free, liftF, foldFree)
import Control.Monad.Rec.Class (forever)
import Control.Monad.Trans (lift)
import Control.Plus (empty)

import Data.List (head)
import Data.Map as M
import Data.Maybe (Maybe(..))
import Data.Const (Const)

import DOM.HTML.Types (HTMLElement, htmlElementToNode)
import DOM.Node.Node (appendChild)

import Halogen.Component (Component', Component, ParentDSL, unComponent)
import Halogen.Effects (HalogenEffects)
import Halogen.HTML.Renderer.VirtualDOM (renderTree)
import Halogen.Internal.VirtualDOM (VTree, createElement, diff, patch, vtext)
import Halogen.Query (HalogenF(..))
import Halogen.Query.EventSource (runEventSource)
import Halogen.Query.StateF (StateF(..))
import Halogen.Data.OrdBox (OrdBox, updateOrdBox, unOrdBox)

import Unsafe.Coerce (unsafeCoerce)

-- | Type alias for driver functions generated by `runUI` - a driver takes an
-- | input of the query algebra (`f`) and returns an `Aff` that returns when
-- | query has been fulfilled.
type Driver f eff = f ~> Aff (HalogenEffects eff)

-- | Type alias used internally to track a driver's persistent state.
newtype DriverState s f f' eff p = DriverState (DriverStateR s f f' eff p)

type DriverStateR s f f' eff p =
  { node :: HTMLElement
  , vtree :: VTree
  , component :: Component' s f f' (Aff (HalogenEffects eff)) p
  , state :: s
  , children :: M.Map (OrdBox p) (DSX f' eff)
  , selfRef :: AVar (DriverState s f f' eff p)
  }

unDriverState
  :: forall s f f' eff p
   . DriverState s f f' eff p
  -> DriverStateR s f f' eff p
unDriverState (DriverState r) = r

type DSL s f f' eff p = ParentDSL s f f' (Aff (HalogenEffects eff)) p

data DSX (f :: * -> *) (eff :: # !)

mkDSX
  :: forall s f f' eff p
   . DriverStateR s f f' eff p
  -> DSX f eff
mkDSX = unsafeCoerce

unDSX
  :: forall f eff r
   . (forall s f' p. DriverStateR s f f' eff p -> r)
  -> DSX f eff
  -> r
unDSX = unsafeCoerce

mkState
  :: forall s f f' eff p
   . HTMLElement
  -> Component' s f f' (Aff (HalogenEffects eff)) p
  -> Aff (HalogenEffects eff) (DSX f eff)
mkState node component = do
  selfRef <- makeVar
  let
    ds =
      { node
      , vtree: vtext ""
      , component
      , state: component.initialState
      , children: M.empty
      , selfRef
      }
  putVar selfRef (DriverState ds)
  pure $ mkDSX ds

-- | This function is the main entry point for a Halogen based UI, taking a root
-- | component, initial state, and HTML element to attach the rendered component
-- | to.
-- |
-- | The returned "driver" function can be used to send actions and requests
-- | into the component hierarchy, allowing the outside world to communicate
-- | with the UI.
runUI
  :: forall f eff
   . Component f (Aff (HalogenEffects eff))
  -> HTMLElement
  -> Aff (HalogenEffects eff) (Driver f eff)
runUI component element = unComponent (runUI' element) component

runUI'
  :: forall s f g eff p
   . HTMLElement
  -> Component' s f g (Aff (HalogenEffects eff)) p
  -> Aff (HalogenEffects eff) (Driver f eff)
runUI' element component = _.driver <$> do
  let node = createElement (vtext "")
  liftEff $ appendChild (htmlElementToNode node) (htmlElementToNode element)
  dsx <- mkState node component
  unDSX (\st -> render st.selfRef) dsx
  let driver :: Driver f eff
      driver = unDSX (\st -> evalF st.selfRef) dsx
  pure { driver }

eval
  :: forall s f g eff p
   . AVar (DriverState s f g eff p)
  -> DSL s f g eff p
  ~> Aff (HalogenEffects eff)
eval ref = case _ of
  State i -> do
    case i of
      Get k -> do
        DriverState st <- peekVar ref
        pure (k st.state)
      Modify f next -> do
        modifyVar (\(DriverState st) -> DriverState (st { state = f st.state })) ref
        x <- peekVar ref
        render ref
        pure next
  Subscribe es next -> do
    let producer :: SCR.StallingProducer (f Unit) (Aff (HalogenEffects eff)) Unit
        producer = runEventSource es
        consumer :: forall a. Consumer (f Unit) (Aff (HalogenEffects eff)) a
        consumer = forever (lift <<< evalF ref =<< await)
    forkAff $ SCR.runStallingProcess (producer $$? consumer)
    pure next
  Lift q -> do
    render ref
    q
  Halt -> empty
  GetSlots k -> do
    st <- unDriverState <$> peekVar ref
    pure $ k $ map unOrdBox $ M.keys st.children
  RunQuery p cq -> do
    st <- unDriverState <$> peekVar ref
    -- TODO: something less ridiculous than this for `updateOrdBox`
    let ob = head $ M.keys $ st.children
    case flip M.lookup st.children <<< updateOrdBox p =<< ob of
      _ -> ?hooo
  --       Nothing -> k Nothing
  --       Just dsx ->
  --         let
  --           -- All of these annotations are required to prevent skolem escape issues
  --           nat :: g ~> Free (DSL s (Const Void) (Const Void) eff Void)
  --           nat = unDSX (\ds q -> liftF (Lift (evalF ds.selfRef q))) dsx
  --           j :: forall h i. (h ~> i) -> Maybe (h ~> i)
  --           j = Just
  --         in
  --           k (j nat)
  -- where
  -- coe :: Free (DSL s (Const Void) (Const Void) eff Void) ~> Free (DSL s f g eff p)
  -- coe = unsafeCoerce

evalF
  :: forall s f g eff p
   . AVar (DriverState s f g eff p)
  -> f
  ~> Aff (HalogenEffects eff)
evalF ref q = do
  st <- unDriverState <$> peekVar ref
  foldFree (eval ref) (st.component.eval q)

peekVar :: forall eff a. AVar a -> Aff (avar :: AVAR | eff) a
peekVar v = do
  a <- takeVar v
  putVar v a
  pure a

render
  :: forall s f g eff p
   . AVar (DriverState s f g eff p)
  -> Aff (HalogenEffects eff) Unit
render ref = do
  DriverState ds <- takeVar ref
  let rc = ds.component.render ds.state
  let vtree' = renderTree (evalF ds.selfRef) rc.tree
  node' <- liftEff $ patch (diff ds.vtree vtree') ds.node
  putVar ref $
    DriverState
      { node: node'
      , vtree: vtree'
      , component: ds.component
      , state: ds.state
      , children: ds.children -- TODO
      , selfRef: ds.selfRef
      }
