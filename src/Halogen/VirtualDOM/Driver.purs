module Halogen.VirtualDOM.Driver
  ( Driver
  , runUI
  ) where

import Prelude

import Control.Applicative.Free (hoistAp, lowerAp)
import Control.Coroutine (await)
import Control.Coroutine.Stalling (($$?))
import Control.Coroutine.Stalling as SCR
import Control.Monad.Aff (Aff, runAff, forkAff)
import Control.Monad.Aff.AVar (AVar, modifyVar, putVar, takeVar, makeVar', peekVar)
import Control.Monad.Aff.Unsafe (unsafeCoerceAff)
import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Class (liftEff)
import Control.Monad.Eff.Exception (error, throwException)
import Control.Monad.Error.Class (throwError)
import Control.Monad.Free (foldFree)
import Control.Monad.Fork (fork)
import Control.Monad.Rec.Class (forever)
import Control.Monad.Trans.Class (lift)
import Control.Parallel (sequential, parallel)

import Data.Lazy (force)
import Data.List (List, (:), (\\))
import Data.List as L
import Data.Map as M
import Data.Traversable (for_, sequence)
import Data.Maybe (Maybe(..), maybe)

import DOM.HTML.Types (HTMLElement, htmlElementToNode)
import DOM.Node.Node (appendChild)

import Halogen.Component (Component, ComponentSlot, unComponent, unComponentSlot)
import Halogen.Data.OrdBox (OrdBox, unOrdBox)
import Halogen.VirtualDOM.Driver.State (DriverStateX, DriverState(..), unDriverStateX, initDriverState)
import Halogen.Effects (HalogenEffects)
import Halogen.HTML.Core (HTML)
import Halogen.VirtualDOM.Renderer (renderHTML)
import Halogen.VirtualDOM.Internal as V
import Halogen.Query.ChildQuery (ChildQuery, unChildQuery)
import Halogen.Query.EventSource (runEventSource)
import Halogen.Query.ForkF as FF
import Halogen.Query.HalogenM (HalogenM(..), HalogenF(..), HalogenAp(..))
import Halogen.Query.StateF (StateF(..))

-- | Type alias for driver functions generated by `runUI` - a driver takes an
-- | input of the query algebra (`f`) and returns an `Aff` that returns when
-- | query has been fulfilled.
type Driver f eff = f ~> Aff (HalogenEffects eff)

type DSL s f g eff p o = HalogenF s f g p o (Aff (HalogenEffects eff))

type LifecycleHandlers eff =
  { initializers :: List (Aff (HalogenEffects eff) Unit)
  , finalizers :: List (Aff (HalogenEffects eff) Unit)
  }

addInitializer
  :: forall g eff
   . AVar (LifecycleHandlers eff)
  -> DriverStateX g eff
  -> Aff (HalogenEffects eff) Unit
addInitializer var dsx =
  for_ (unDriverStateX (\st -> evalF st.selfRef <$> st.component.initializer) dsx) \i ->
    modifyVar (\lchs -> { initializers: i : lchs.initializers, finalizers: lchs.finalizers }) var

addFinalizer
  :: forall f eff
   . AVar (LifecycleHandlers eff)
  -> DriverStateX f eff
  -> Aff (HalogenEffects eff) Unit
addFinalizer var =
  unDriverStateX \st -> do
    for_ (evalF st.selfRef <$> st.component.finalizer) \f ->
      modifyVar (\lchs -> { initializers: lchs.initializers, finalizers: f : lchs.finalizers }) var
    for_ st.children (addFinalizer var <=< peekVar)

handleLifecycle
  :: forall eff r
   . (AVar (LifecycleHandlers eff) -> Aff (HalogenEffects eff) r)
  -> Aff (HalogenEffects eff) r
handleLifecycle f = do
  lchs <- makeVar' { initializers: L.Nil, finalizers: L.Nil }
  result <- f lchs
  { initializers, finalizers } <- peekVar lchs
  sequence $ L.reverse initializers
  sequence finalizers
  pure result

-- | This function is the main entry point for a Halogen based UI, taking a root
-- | component, initial state, and HTML element to attach the rendered component
-- | to.
-- |
-- | The returned "driver" function can be used to send actions and requests
-- | into the component hierarchy, allowing the outside world to communicate
-- | with the UI.
runUI
  :: forall f eff o
   . Component HTML f o (Aff (HalogenEffects eff))
  -> HTMLElement
  -> Aff (HalogenEffects eff) (Driver f eff)
runUI component element = _.driver <$> do
  fresh <- makeVar' 0
  handleLifecycle \lchs -> do
    var <- runComponent (const (pure unit)) fresh lchs component
    dsx <- peekVar var
    addInitializer lchs dsx
    unDriverStateX (\st -> do
      liftEff $ appendChild (htmlElementToNode st.node) (htmlElementToNode element)
      -- The record here is a hack around a skolem escape issue. If the typing
      -- rules for records change so this no longer works it may also be fixable
      -- with copious type annotations.
      pure { driver: evalF st.selfRef }) dsx

runComponent
  :: forall f eff o
   . (o -> Aff (HalogenEffects eff) Unit)
  -> AVar Int
  -> AVar (LifecycleHandlers eff)
  -> Component HTML f o (Aff (HalogenEffects eff))
  -> Aff (HalogenEffects eff) (AVar (DriverStateX f eff))
runComponent handler fresh lchs = unComponent \component -> do
  keyId <- peekVar fresh
  modifyVar (_ + 1) fresh
  var <- initDriverState component handler keyId fresh
  unDriverStateX (render lchs <<< _.selfRef) =<< peekVar var
  pure var

eval
  :: forall s f g eff p o
   . AVar (DriverState s f g eff p o)
  -> DSL s f g eff p o
  ~> Aff (HalogenEffects eff)
eval ref = case _ of
  State i -> do
    case i of
      Get k -> do
        DriverState { state } <- peekVar ref
        pure (k state)
      Modify f next -> do
        modifyVar (\(DriverState st) -> DriverState (st { state = f st.state })) ref
        handleLifecycle \lchs -> render lchs ref
        pure next
  Subscribe es next -> do
    let consumer = forever (lift <<< evalM ref =<< await)
    forkAff $ SCR.runStallingProcess (runEventSource es $$? consumer)
    pure next
  Lift aff ->
    aff
  Halt msg ->
    throwError (error msg)
  GetSlots k -> do
    DriverState { children } <- peekVar ref
    pure $ k $ map unOrdBox $ M.keys children
  ChildQuery cq ->
    evalChildQuery ref cq
  Raise o a -> do
    DriverState { handler } <- peekVar ref
    handler o
    pure a
  Par (HalogenAp p) ->
    sequential $ lowerAp $ hoistAp (parallel <<< evalM ref) p
  Fork f ->
    FF.unFork (\(FF.ForkF fx k) â†’
      k <<< map unsafeCoerceAff <$> fork (evalM ref fx)) f

evalChildQuery
  :: forall s f g eff p o
   . AVar (DriverState s f g eff p o)
  -> ChildQuery g (Aff (HalogenEffects eff)) p
  ~> Aff (HalogenEffects eff)
evalChildQuery ref = unChildQuery \p k -> do
  DriverState st <- peekVar ref
  case M.lookup (st.mkOrdBox p) st.children of
    Just var -> do
      dsx <- peekVar var
      k (unDriverStateX (\ds q -> evalF ds.selfRef q) dsx)
    Nothing -> throwError (error "Slot lookup failed for child query")

evalF
  :: forall s f g eff p o
   . AVar (DriverState s f g eff p o)
  -> f
  ~> Aff (HalogenEffects eff)
evalF ref q = do
  DriverState st <- peekVar ref
  case st.component.eval q of
    HalogenM fx -> foldFree (eval ref) fx

evalM
  :: forall s f g eff p o
   . AVar (DriverState s f g eff p o)
  -> HalogenM s f g p o (Aff (HalogenEffects eff))
  ~> Aff (HalogenEffects eff)
evalM ref (HalogenM q) = foldFree (eval ref) q

render
  :: forall s f g eff p o
   . AVar (LifecycleHandlers eff)
  -> AVar (DriverState s f g eff p o)
  -> Aff (HalogenEffects eff) Unit
render lchs var = takeVar var >>= \(DriverState ds) -> do
  childrenVar <- makeVar' (M.empty :: M.Map (OrdBox p) (AVar (DriverStateX g eff)))
  let selfEval = evalF ds.selfRef
  vtree' <-
    renderHTML
      (handleAff <<< selfEval)
      (renderChild selfEval ds.fresh ds.mkOrdBox ds.children childrenVar lchs)
      (ds.component.render ds.state)
  node' <- liftEff $ V.patch (V.diff ds.vtree vtree') ds.node
  children <- takeVar childrenVar
  let
    newSlots = M.keys children
    oldSlots = M.keys ds.children
    removed = oldSlots \\ newSlots
    added = newSlots \\ oldSlots
  for_ added \p ->
    for_ (M.lookup p children) (addInitializer lchs <=< peekVar)
  for_ removed \p ->
    for_ (M.lookup p ds.children) (addFinalizer lchs <=< peekVar)
  putVar var $
    DriverState
      { node: node'
      , vtree: vtree'
      , component: ds.component
      , state: ds.state
      , children
      , mkOrdBox: ds.mkOrdBox
      , selfRef: ds.selfRef
      , handler: ds.handler
      , keyId: ds.keyId
      , fresh: ds.fresh
      }

renderChild
  :: forall f g eff p
   . (f ~> Aff (HalogenEffects eff))
  -> AVar Int
  -> (p -> OrdBox p)
  -> M.Map (OrdBox p) (AVar (DriverStateX g eff))
  -> AVar (M.Map (OrdBox p) (AVar (DriverStateX g eff)))
  -> AVar (LifecycleHandlers eff)
  -> ComponentSlot HTML g (Aff (HalogenEffects eff)) p (f Unit)
  -> Aff (HalogenEffects eff) V.VTree
renderChild handler fresh mkOrdBox childrenIn childrenOut lchs =
  unComponentSlot \p ctor k -> do
    var <- case M.lookup (mkOrdBox p) childrenIn of
      Just existing -> pure existing
      Nothing -> runComponent (maybe (pure unit) handler <<< k) fresh lchs (force ctor)
    modifyVar (M.insert (mkOrdBox p) var) childrenOut
    pure <<< unDriverStateX (\st -> V.widget st.keyId st.node) =<< peekVar var

-- | TODO: we could do something more intelligent now this isn't baked into the
-- | virtual-dom rendering. Perhaps write to an avar when an error occurs...
-- | something other than a runtime exception anyway.
handleAff
  :: forall eff a
   . Aff (HalogenEffects eff) a
  -> Eff (HalogenEffects eff) Unit
handleAff = void <<< runAff throwException (const (pure unit))
