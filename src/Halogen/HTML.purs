module Halogen.HTML
  ( HTML()
  , Attribute(..)
  
  , MouseEvent()
  
  , text
  , child
  
  , button
  , button'
  , div
  , div'
  
  , renderHtml
  , graft
  ) where

import Data.Array
import Data.Tuple
import Data.Foldable (foldMap)
import Data.Bifunctor
import Data.Maybe
import Data.Either
import Data.Function
import Data.Foldable (for_)

import Control.Monad.Eff
import Control.Monad.ST

import Halogen.VirtualDOM

data MouseEvent

-- TODO: add more event types
data Attribute i
  = OnClick (MouseEvent -> i)

instance functorAttribute :: Functor Attribute where
  (<$>) f (OnClick g) = OnClick (f <<< g)

-- | The `HTML` type represents HTML documents before being rendered to the virtual DOM, and ultimately,
-- | the actual DOM.
-- |
-- | This representation is useful because it supports various typed transformations, such as grafting
-- | child nodes. It also gives a strongly-typed representation for the events which can be
-- | generated by a document.
-- |
-- | The type parameters are:
-- |
-- | - `c` - the type of child node keys. A sensible top-level document should not have any unpopulated child 
-- |   nodes, so this type should be `Void` in that situation.
-- | - `i` - the type of events which can be generated by this document.
-- |
-- | Technically, `HTML` is monadic in its first type argument. However, this `Monad` isn't necessarily very
-- | useful compared to the `Functor` instance on `i`, so it is not provided.
data HTML c i
  = Text String
  | Child c
  | Element String [Attribute i] [HTML c i]
    
instance functorHTML :: Functor (HTML c) where
  (<$>) _ (Text s) = Text s
  (<$>) _ (Child c) = Child c
  (<$>) f (Element name attribs children) = Element name (map (f <$>) attribs) (map (f <$>) children)
  
instance bifunctorHTML :: Bifunctor HTML where
  bimap _ _ (Text s) = Text s
  bimap f _ (Child c) = Child (f c)
  bimap f g (Element name attribs children) = Element name (map (g <$>) attribs) (map (bimap f g) children)

-- | Render a `HTML` document to a virtual DOM node
renderHtml :: forall i c eff. (i -> Eff eff Unit) -> HTML c i -> VTree
renderHtml _ (Text s) = vtext s
renderHtml _ (Child _) = vnode "div" emptyProps [vtext "Child node was not populated"]
renderHtml k (Element name attribs children) = vnode name props (map (renderHtml k) children)
  where
  props :: Props
  props | null attribs = emptyProps
        | otherwise = runProps do 
                        stp <- newProps
                        for_ attribs (addProp stp)
                        return stp
    where    
    addProp :: forall h eff. STProps h -> Attribute i -> Eff (st :: ST h | eff) Unit
    addProp props (OnClick f) = runFn3 handlerProp "onclick" (k <<< f) props

-- | Graft a child node, removing a placeholder type
graft :: forall i1 i2 c. HTML (Maybe c) i1 -> HTML c i2 -> HTML c (Either i1 i2)
graft (Text s) _ = Text s
graft (Child Nothing) child = Right <$> child
graft (Child (Just c)) _ = Left <$> Child c
graft (Element name attribs children) child = Element name (map (Left <$>) attribs) (map (`graft` child) children)

text :: forall i c. String -> HTML c i
text = Text

child :: forall i c. c -> HTML c i
child = Child

-- TODO: add remaining HTML elements

button :: forall i c. [Attribute i] -> [HTML c i] -> HTML c i
button = Element "button"

button' :: forall i c. [HTML c i] -> HTML c i
button' = button []

div :: forall i c. [Attribute i] -> [HTML c i] -> HTML c i
div = Element "div"

div' :: forall i c. [HTML c i] -> HTML c i
div' = div []
